#!/bin/bash
# TDD Commit Message Helper
# This hook helps enforce TDD practices by suggesting appropriate commit message prefixes

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# Only process for non-merge commits
if [ "$COMMIT_SOURCE" = "merge" ]; then
    exit 0
fi

# Read the current commit message
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Check if this is a TDD-related commit based on file changes
TEST_FILES_CHANGED=$(git diff --cached --name-only | grep -E "(test|spec).*\.rs$" | wc -l)
SRC_FILES_CHANGED=$(git diff --cached --name-only | grep -E "src/.*\.rs$" | grep -v -E "(test|spec)" | wc -l)

# If only test files changed, suggest test prefix
if [ "$TEST_FILES_CHANGED" -gt 0 ] && [ "$SRC_FILES_CHANGED" -eq 0 ]; then
    if ! echo "$COMMIT_MSG" | grep -q "^test"; then
        echo -e "# TDD: You're only changing test files. Consider using 'test:' prefix\n# Example: test(component): add failing test for [feature]\n\n$COMMIT_MSG" > "$COMMIT_MSG_FILE"
    fi
fi

# If both test and source files changed, suggest feat or fix prefix
if [ "$TEST_FILES_CHANGED" -gt 0 ] && [ "$SRC_FILES_CHANGED" -gt 0 ]; then
    if ! echo "$COMMIT_MSG" | grep -q "^(feat|fix|refactor)"; then
        echo -e "# TDD: You're changing both tests and source. Consider:\n# - 'feat:' for new features\n# - 'fix:' for bug fixes\n# - 'refactor:' for improvements\n\n$COMMIT_MSG" > "$COMMIT_MSG_FILE"
    fi
fi

# Add TDD reminder if tests weren't changed with source
if [ "$SRC_FILES_CHANGED" -gt 0 ] && [ "$TEST_FILES_CHANGED" -eq 0 ]; then
    echo -e "# WARNING: Source files changed without tests!\n# Remember: Write tests first (RED), then implementation (GREEN), then refactor.\n\n$COMMIT_MSG" > "$COMMIT_MSG_FILE"
fi

exit 0
